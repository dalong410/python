파이썬에서 엑셀 파일 다루기

1. pandas 모듈을 설치해주어야 한다.      pip install pandas
2. xlrd 모듈을 설치해주어야 한다.        pip install xlrd
3. xlsxwriter 모듈을 설치해주어야 한다.  pip install xlsxwriter


>>> import pandas as pd

>>> df = pd.read_excel('D:/data1.xlsx')

>>> df
  학생  국어  영어  수학         평균
0  A  80  90  85  85.000000
1  B  90  95  95  93.333333
2  C  95  70  75  80.000000
3  D  70  85  80  78.333333
4  E  75  90  85  83.333333

>>> pd.read_excel('D:/학생시험성적1.xlsx')
  학생  국어  영어  수학         평균
0  A  80  90  85  85.000000
1  B  90  95  95  93.333333
2  C  95  70  75  80.000000
3  D  70  85  80  78.333333
4  E  75  90  85  83.333333


>>> pd.read_excel('D:/학생시험성적1.xlsx', sheet_name = 0)
  학생  국어  영어  수학         평균
0  A  80  90  85  85.000000
1  B  90  95  95  93.333333
2  C  95  70  75  80.000000
3  D  70  85  80  78.333333
4  E  75  90  85  83.333333


>>> pd.read_excel('D:/학생시험성적1.xlsx', sheet_name = 1)
  학생  과학  컴퓨터  파이썬         평균
0  A  80   90   85  85.000000
1  B  90   95   95  93.333333
2  C  95   70   75  80.000000
3  D  70   85   80  78.333333
4  E  75   90   85  83.333333



>>> pd.read_excel('D:/학생시험성적1.xlsx', sheet_name = 'Sheet1')
  학생  국어  영어  수학         평균
0  A  80  90  85  85.000000
1  B  90  95  95  93.333333
2  C  95  70  75  80.000000
3  D  70  85  80  78.333333
4  E  75  90  85  83.333333



엑셀 파일에서 읽어온 DataFrame 데이터를 보면 index가 0부터 열 개수만큼 자동으로 생성됐습니다.

read_excel( ) 에서 인자 index_col을 지정하지 않으면 index가 자동으로 설정되지만 index_col 에 번호나 '열 이 름' 을 지정 하면 지정된 열이 index가 됩니다.

다음은 엑셀 데이터에서 첫 번째 열인 '학생' 열을 index로 지정한 예입니다. 이를 위해 index_col 에는 0을 지정 해도 되고 엑셀의 '열 이름' 인 '학생' 을 지정 해도 됩니다.


>>> df = pd.read_excel('D:/학생시험성적1.xlsx', sheet_name = 1, index_col = 0)
>>> df
    과학  컴퓨터  파이썬         평균
학생                         
A   80   90   85  85.000000
B   90   95   95  93.333333
C   95   70   75  80.000000
D   70   85   80  78.333333
E   75   90   85  83.333333


또는

>>> df = pd.read_excel('D:/학생시험성적1.xlsx', sheet_name = 1, index_col = '학생')
>>> df
    과학  컴퓨터  파이썬         평균
학생                         
A   80   90   85  85.000000
B   90   95   95  93.333333
C   95   70   75  80.000000
D   70   85   80  78.333333
E   75   90   85  83.333333


출력 결과를 보면 변수 df의 index로 엑셀 파일에서 '학생'에 해당하는 열의 내용이 지정됐습니다.





☞ 데이터를 엑셀 파일로 쓰기

pandas를 이용해 파이썬의 데이터를 엑셀 파일로 쓰는 방법을 살펴본다.
엑셀파일을 pandas의 DataFrame 데이터로 읽어오는 것을 간단하지만 DataFrame 데이터를 엑셀 파일로 쓰려면 다음과 같은 3 단계를 거쳐야 한다.


(1) pandas의 ExcelWriter 객체 생성
excel_writer = pd.ExcelWriter('excel_output.xlsx', engine= 'xlsxwriter')


(2) DataFrame 데이터를 지정된 엑셀 시트 (Sheet)에 쓰기
df1.to_excel(excel_writer, index=True 혹은 False, sheet_name= '시트이름1')
df2.to_excel(excel_writer, index=True 혹은 False, sheet_name= '시트이름2')


(3) ExcelWriter 객체를 닫고/지정된 엑셀 파일 생성
excel_writer.save()


---------------------------------------------------------

위의 문장 풀이

(1) 먼저 pandas의 ExcelWriter()를 이용해 pandas ExcelWriter의 객체(excel_writer)를 생성합니다. 
    이때 파일 이름('excel_output.xlsx')과 엑셀 쓰기 앤진(engine)을 지정합니다. 
    파일 이름에는 파일이 있는 폴더의 위치를 함께 지정할 수 있습니다. 
    엑셀 쓰기 엔진을 지정하려면 「engine= '엔진 이름'」을 이용합니다. 
    여기서는 아나콘다를 설치할 때 설치된 xlsxwriter 모듈을 이용하기 위해 
    「engine = 'xlsxwriter'」로 지정합니다.


(2) 다음으로 to_excel( )을 이용해 지정된 엑셀 시트에 DataFrame 데이터를 씁니다. 
    여기서 index 옵션에 True를 지정하면 Data Frame 데이터의 index를 엑셀 시트의 데이터에 포함하고,
    False를 지정하면 제외합니다. 
    index 옵션을 쓰지 않으면 True로 지정됩니다. 
    그리고 「sheet name= '시트이름'」을 이용해 엑셀의 시트 이름을 지정합니다. 
    「sheet_name='시트이름'」을 지정하지 않으면 기본 옵션인 「sheet name= 'Sheet1'」이 적용돼 
    엑셀의 'Sheet1' 시트에 DataFrame 데이터가 들어갑니다. 
    to_excel ( )에서 Data Frame 데이터마다 『sheet_ name= '시트이름'」을 다르게 지정해 수행하면 
    하나의 엑셀 파일에 여러 개의 시트를 생성할 수 있습니다.


(3) 마지막으로 save( )를 이용해 생성된 ExcelWriter 객체(excel_writer)를 닫고, 
    지정된 파일('excel_output .xlsx')을 생성합니다.



pandas의 ExcelWriter()에서 쓰기 엔진으로 지정한 xlsxwriter는 엑셀 파일에 데이터를 쓸 때 사용하는 xlsxwriter 모듈입니다. 이 모듈은 엑셀 2007 이후의 파일 포멧인 XLSX 파일을 지원하며 엑셀 파일에 문자, 숫자를 쓸 수 있고 연산을 하거나 차트를 생성 또는 이미지를 추가할 수 있습니다. 

더 많은 정보가 필요하면 웹사이트 http://xlsxwritereadthedocs.io/ 를 참고하시길 바랍니다.



>>> import pandas as pd

>>> excel_exam_data1 = {'학생': ['A', 'B', 'C', 'D', 'E', 'F',],
'국어': [80, 90, 95, 70, 75, 85],
'영어': [90, 95, 70, 85, 90, 95],
'수학': [85, 95, 75, 80, 85, 100]}

>>> df1 = pd.DataFrame(excel_exam_data1,columns=['학생', '국어', '영어', '수학'])

>>> df1
  학생  국어  영어   수학
0  A  80  90   85
1  B  90  95   95
2  C  95  70   75
3  D  70  85   80
4  E  75  90   85
5  F  85  95  100



위에서 생성된 pandas의 DataFrame 데이터(df1)를 이용해 엑셀 파일을 생성하겠습니다.

ExcelWriter() 에서 파일 이름은 경로를 포함해 "D:/학생시험성적2.xlsx' 로 지정 하고 시트 이름은 지정하지 않겠습니다. 

이 경우 엑셀의 'Sheet1'에 DataFrame 데이터(df1)가 들어 갑니다. 


이를 구현한 코드는 다음과 같습니다.

>>> excel_writer = pd.ExcelWriter('D:/py/new/학생시험성적2.xlsx', engine= 'xlsxwriter')

>>> df1.to_excel(excel_writer, index=False)

>>> excel_writer.save()


위의 명령을 수행하면 지정된 폴더 ('D:/')에 지정한 이름의 엑셀 파일('학생시험성적2.xlsx')이 생성됩니다. 
이 파일을 열어보면 엑셀 파일에 DataFrame 데이터 (df1)가 잘 들어간 것을 확인할 수 있습니다. 

옵션 to_excel() 에서 'index=False' 옵션을 지정했으므로 DataFrame 데이터(df1)의 index는 엑셀 파일에 포함되지 않았습니다.





☞ 엑셀 파일 생성 시 주의할 점

엑셀 프로그램으로 엑셀 파일을 연 상태에서 pandas를 이용해 같은 이름의 엑셀 파일을 생성하면 오류가 발생합니다. pandas로 엑셀 파일을 생성하는 코드를 실행하기 전에는 반드시 지정된 엑셀 파일을 닫아야 합니다. 
또한 pandas를 이용해 엑셀 파일을 생성할 때 같은 이름의 엑셀 파일이 있으면 시용자에게 확인하지 않고 덮어쓰므로 주의해야 합니다.




☞ 시트 이름을 지정해 엑셀 파일을 생성 

이번에는 엑셀의 시트 이름을 지정해 엑셀 파일을 생성합니다. 
엑셀 파일의 경로는 같고 파일 이름은 학생시험성적3.xlsx'로 하겠습니다.


>>> excel_writer2 = pd.ExcelWriter('D:/학생시험성적3.xlsx', engine= 'xlsxwriter')

>>> df1.to_excel(excel_writer2, index=False, sheet_name='중간고사')

>>> excel_writer2.save()


위의 명령을 수행하면 지정된 폴더 ('D:/')에 지정한 이름의 엑셀 파일('학생시험성적3.xlsx')이 생성됩니다.이 파일을 엑셀 프로그램으로 열어 보면 엑셀 시트 이름이 '중간고사'로 지정되어 파일이 생성된 것을 볼 수 있습니다.




☞ 하나의 엑셀 파일에 두 개의 데이터 시트를 생성

이번에는 하나의 엑셀 파일에 두 개의 데이터 시트를 생성해 보겠습니다. 
실습을 위해 앞에서 생성한 Data Frame 데이터와 유사하게 데이터를 하나 더 생성하겠습니다.



>>> import pandas as pd

>>> excel_exam_data2 = {'학생': ['A', 'B', 'C', 'D', 'E', 'F',],
'국어': [85, 95, 75, 80, 85, 100],
'영어': [80, 90, 95, 70, 75, 85],
'수학': [90, 95, 70, 85, 90, 95]}

>>> df2 = pd.DataFrame(excel_exam_data2,columns=['학생', '국어', '영어', '수학'])

>>> df2
  학생   국어  영어  수학
0  A   85  80  90
1  B   95  90  95
2  C   75  95  70
3  D   80  70  85
4  E   85  75  90
5  F  100  85  95




앞에서 생성한 Data Frame 데이터 (df1과 df2)를 이용해 엑셀 파일에 두개의 시트를 생성해 보겠습니다.


>>> excel_writer3 = pd.ExcelWriter( 'D:/학생시험성적4.xlsx', engine='xlsxwriter')

>>> df1.to_excel(excel_writer3, index=False, sheet_name= '중간고사')

>>> df2.to_excel(excel_writer3, index=False, sheet_name= '기말고사')

>>> excel_writer3.save()



위 코드를 수행하면 하나의 엑셀 파일에 두개의 시트가 생성됩니다. 
해당 시트를 확인해 보면 각 시트에 DataFrame의 데이터(df1과 df2)가 잘 들어 간 것을 알 수 있습니다.




☞ 엑셀 파일 통합하기


엑셀로 업무를 하다 보면 여러 개의 엑셀 파일을 하나의 파일로 통합해야 하는 일이 종종 발생합니다.
만약 마케팅 부서의 직장 상사가 지역별 담당자가 따로 관리하는 분기별 제품 판매량 데이터를 엑셀 파일로 정리해 내일까지 보내달라고 요청 했다면 보통 다음과 같은 과정을 통해 여러 데이터를 하나로 통합합니다.


01. 통합 담당자가 지역별 담당자에게 엑셀로 작성한 예제 파일을 보내고 분기별 제품 판매 현황을 정리해서 달라고 이메일을 보낸다.

02. 지역별 담당자가 분기별 제품 판매 현황을 엑셀 파일로 정리한 후, 통합 담당자에게 이메일로 답장을 보낸다
03. 통합 담당자가 이 메일에 첨부된 엑셀 파일을 열어서 필요한 부분만 복사한다.
04. 보고할 통합 버전의 엑셀 파일에 차례대로 일일이 붙여넣는다.
05. 지역별 담당자가 보낸 파일을 모두 통합하기 위해 3, 4단계를 담당자 수만큼 반복한다.




정리해야 할 엑셀 파일이 5개 정도라면 엑셀 파일을 일일이 수작업으로 통합하는 데 큰 무리가 없을 것입니다. 
하지만 10개, 20개, 50개, 심지어 100개 이상의 파일을 대상으로 일일이 필요한 곳을 선택한 후 복사해서 다른 파일에 붙여 넣어야 한다면 이러한 작업은 쉽지 않을 것 입니다. 

반복된 작업으로 인해 집중력이 점점 떨어져 시간은 더 걸리고 심지어 데이터가 누락될 수도 있습니다. 

엑셀 파일의 단순 통합을 위해 지루하게 반복하던 '선택, 복사 및 붙여 넣기 (select, copy & paste)'는 파이 썬을 이용하면 이런 단순 통합 작업을 쉽고 빠르게 수행할 수 있습니다. 

이제 파이썬으로 엑셀 파일을 통합하는 방법을 알아보겠습니다.



☞☞ 효율적인 데이터 처리를 위한 엑셀 데이터 구조   376페이지

엑셀 파일에 저장된 데이터를 파이썬으로 읽어 와서 효율적으로 처리하려면 엑셀에서 데이터를 생성할 때부터 데이터 구조에 신경 써야 합니다. 

다음은 효율적인 데이터 처리를 위해 엑셀에서 데이터를 생성할 때 주의할 점 입니다.

- 열의 머리글(header)은 한 줄로만 만들고 데이터는 그 아래에 입력한다.
- 열 머리글이나 데이터 입력 부분에 셀 병합 기능은 이용하지 않는다.
- 데이터를 입력할 때 하나의 셀에 숫자와 단위를 같이 쓰지 않는다.
- 하나의 열에 입력한 값의 데이터 형식은 모두 일치해야 한다. 
  즉, 하나의 열에 문자열, 숫자 날짜 등을 혼합해서 쓰지 않는다.
- 데이터를 연도, 분기, 월, 업체별, 제품별 등의 시트로 나누지 않는다. 
  즉, 가능하면 모든 데이터를 하나의 시트에 다 넣는다.


엑셀에서 데이터를 생성할 때 주의할 점은 엑셀뿐만 아니라 다른 형식의 파일로 데이터를 생성할 때도 그대로 적용할 수 있다. 데이터를 생성할 때부터 데이터 구조에 신경 쓰면 파이썬과 같은 프로그래밍언어에서 데이터를 처리 하기가 편해진다.

pandas를 이용해 여러 개의 엑셀 파일에서 데이터를 읽어와서 pandas의 
DataFrame 데이터로 통합하는 방법을 알아본다.

지역별 담당자가 작성한 엑셀 파일은 각각 '담당자별-판매량_Andy사원.xlsx ', '담당자별-판매량_BeckyAf원.xlsx', '담당자별-판매량_Chris사원.xlsx'이다. 

여러 개의 엑셀 파일을 읽으려면 먼저 파일을 지정해야 한다. 
excel_data files 변수에 읽으려는 엑셀 파일명을 파일 경로와 함께 지정했다.

>>> import pandas as pd

>>> excel_data_files = ['D:/py/data/담당자별_판매량_Andy사원.xlsx',
			'D:/py/data/담당자별_판매량_Becky사원.xlsx',
			'D:/py/data/담당자별_판매량_Chris사원.xlsx']


엑셀 파일 각각에서 읽어온 데이터를 통합하기 위해 pandas의 DataFrame 형태로 변수를 하나 생성해준다.

>>> total_data = pd.DataFrame()


이제 excel_data_files 리스트에 있는 엑셀 파일을 하나씩 읽은 후에 append( )를 이용해 total_data 변수에 차례대로 추가하면 여러 개의 엑셀 파일에서 읽은 데이터는 모두 total_data에 통합된다.

>>> import pandas as pd
>>> for f in excel_data_files :
        df = pd.read_excel(f)
        total_data = total_data.append(df)

>>> total_data 
   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331
0   시계   B  나  154  108  155  114
1   구두   B  나  200  223  213  202
2  핸드백   B  나  350  340  377  392
0   시계   C  다  168  102  149  174
1   구두   C  다  231  279  277  292
2  핸드백   C  다  365  383  308  323



결과를 보면 각 엑셀 파일에서 불러온 데이터가 하나로 통합된 것을 확인할 수 있다. 
그런데 파일별 index '[0,1,2]'가 그대로 붙여져 있다. 
이는 pandas의 DataFrame 데이터를 append( )를 이용해 추가할 때 index가 그대로 들어가서 발생한 문제로 
다음과 같이 append()의 옵션에 'ignoreindex= True'를 추가하면 해결된다. 


>>> for f in excel_data_files :
        df = pd.read_excel(f)
        total_data = total_data.append(df, ignore_index=True)

        
>>> total_data
    제품명 담당자 지역  1분기  2분기  3분기  4분기
0    시계   A  가  198  123  120  137
1    구두   A  가  273  241  296  217
2   핸드백   A  가  385  316  355  331
3    시계   B  나  154  108  155  114
4    구두   B  나  200  223  213  202
5   핸드백   B  나  350  340  377  392
6    시계   C  다  168  102  149  174
7    구두   C  다  231  279  277  292
8   핸드백   C  다  365  383  308  323
9    시계   A  가  198  123  120  137
10   구두   A  가  273  241  296  217
11  핸드백   A  가  385  316  355  331
12   시계   B  나  154  108  155  114
13   구두   B  나  200  223  213  202
14  핸드백   B  나  350  340  377  392
15   시계   C  다  168  102  149  174
16   구두   C  다  231  279  277  292
17  핸드백   C  다  365  383  308  323

 
위의 결과를 보면 이제 index가 순차적으로 잘 지정된 것을 볼 수 있다.

앞에서 수행한 코드의 출력 결과를 보면 알겠지만 데이터 형식이 같은 세 개의 엑셀 파일을 읽어서 하나로 통합하는 작업은 파이썬을 이용하면 손쉽게 수행할 수 있다. 이를 위해 변수 excel_data_files에 폴더 위치와 함께 엑셀 파일명을 리스트로 지정했다. 앞의 예처럼 파일의 수가 작을 때는 파일명을 일일이 입력하는 것이 어렵지 않지만 통합해야는 엑셀 파일이 100개 혹은 1000개 이상으로 늘어 나면 파일명을 수동으로 일일이 입력하기는 쉽지 않은 일이다.



파이썬 내장 모듈인 glob을 이용하면 파일명을 일일이 입력하지 않고 자동으로 파일명을 가져올 수 있다. 

사용법은 다음과 같다.

import glob
glob.glob('path_file_name')


위의 glob 모듈의 glob( )은 지정된 문자열에 대응되는 모든 파일과 디렉터리의 리스트를 반환한다.
이때 문자열에는 '*'와 '?'를 사용할 수 있다. 
여기서 '*'는 길이와 상관없이 모든 문자열을, '?'는 한 글자로 된 모든 문자열을 의미한다.

이제 glob( )을 이용해 지정된 폴더에서 원하는 엑셀 파일명을 추출해 보겠다. 이를 위해 지정 문자열에 '*'를 포함해서 특정 문자열을 포함한 모든 파일을 검색하는 코드를 작성해준다.

>>> import glob

>>> glob.glob("D:/py/data/담당자별_판매량_*사원.xlsx")

['D:/py/data/담당자별_판매량_Andy사원.xlsx',
'D:/py/data/담당자별_판매량_Becky사원.xlsx',
'D:/py/data/담당자별_판매량_Chris사원.xlsx']


결과를 보면 통합해야 할 '담당자별_판매량_Andy사원.xlsx', '담당자별_판매량_Becky사원.xlsx', '담당자별_판매량_Chris사원.xlsx' 파일이 모두 검색된 것을 볼 수 있다. 

이것은 지정된 경로에서 파일 이름 중 '담당자별_판매량_[모든문자]_사원.xlsx' 형태의 모든 파일을 찾아서 리스트로 반환했기 때문이다. 

출력 결과에서 폴더 구분을 위해 파일 이름 앞에 / 대신 \\가 출력됐지만 폴더 구분은 잘 되니 신경 쓰지 않
아도 된다. 



자동으로 필요한 엑셀 파일 리스트를 얻어오는 코드와 엑셀 파일에서 데이터를 읽어서 각 데이터를 하나의 DataFrame 변수에 추가하는 코드를 통합하면 다음과 같다.


>>> import glob

>>> import pandas as pd

>>> excel_data_files1 = glob.glob("D:/py/data/담당자별_판매량_*사원.xlsx")

>>> total_data1 = pd.DataFrame()

>>> for f in excel_data_files1 :
	df = pd.read_excel(f)
	total_data1 = total_data1.append(df, ignore_index=True)

>>> total_data1 
   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331
3   시계   B  나  154  108  155  114
4   구두   B  나  200  223  213  202
5  핸드백   B  나  350  340  377  392
6   시계   C  다  168  102  149  174
7   구두   C  다  231  279  277  292
8  핸드백   C  다  365  383  308  323


위 코드를 통해 엑셀 파일 이름을 일일이 지정하지 않고 폴더에서 원하는 엑셀 파일을 리스트로 만들고
각 엑셀 파일의 데이터를 하나의 DataFrame 변수에 통합해서 할당하는 실습을 하였다. 

-------------------------------------------------------------------------------------------

☞ 통합 결과를 엑셀 파일로 저장하기

다음은 pandas의 DataFrame 형식의 데이터를 엑셀 파일로 쓰는 방법을 이용하여 엑셀 파일에서 얻은 데이터의 통합 결과를 엑셀 파일로 저장해본다.

>>> import glob

>>> import pandas as pd

>>> excel_file_name = "D:/py/data/담당자별_판매량_통합.xlsx"

>>> excel_total_file_writer = pd.ExcelWriter(excel_file_name, engine='xlsxwriter')

>>> total_data1.to_excel(excel_total_file_writer, index=False, sheet_name= '담당자별_판매량_통합')

>>> excel_total_file_writer.save()

>>> glob.glob(excel_file_name) 
['D:/py/data/담당자별_판매량_통합.xlsx']


출력 결과 처럼 '담당자별_판매량_통합.xlsx' 파일이 생성되었다. 
이 엑셀 파일을 열어보면 여러 엑셀 파일의 데이터가 통합된 것을 확인할 수 있다. 

-------------------------------------------------------------------------------------

☞ 엑셀 파일로 읽어온 데이터 다루기

엑셀에서 수행하던 다양한 데이터 처리도 파이썬을 이용해 얼마든지 수행할 수 있다. 
이번에는 엑셀 파일에서 불러온 데이터를 처리하는 몇 가지 방법을 살펴보겠다.


◈ 데이터를 추가하고 변경하기
엑셀 파일을 pandas로 읽은 후에 다음과 같은 방법으로 DataFrame 데이터에 값을 추가하거나 변경할 수 있다. 

>>> import pandas as pd

>>> df = pd .read_excel('excel_file.xlsx')

>>> df.loc[index_name, column_name) = value 


index name은 pandas의 DataFrame 데이터에서 행 지정을 위한 index 라벨의 이름이고, 
column_name은 열 지정을 위한 columns 라벨의 이름이다. 또한 value는 지정하고자 하는 값이다.

앞에서 사용했던 '담당자별_판매량_Andy사원.xlsx' 엑셀 파일에서 특정 데이터의 값을 변경해 본다. 
우선 다음과 같이 pandas를 이용해 엑셀 파일을 읽어와서 DataFrame 데이터로 할당해준다.

>>> import pandas as pd

>>> df = pd.read_excel('D:/py/data/담당자별_판매량_Andy사원.xlsx')

>>> df 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331




위의 DataFrame 데이터인 df에서 index 라벨 이름이 2이고, 
columns 라벨 이름이 '4분기'인 데이터 값 331을 0으로 변경하려면 다음과 같이 수행한다.

>>> df.loc[2, '4분기'] = 0

>>> df 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355    0




결과를 보면 index_name과 column_name으로 지정한 위치의 데이터 값이 331 에서 0으로 변경된 것을 알 수 있다. 
다음은 'df.loc[index_name, column_name] = value'를 이용해 기존 데이터에 행을 하나 더 추가해준다

>>> df.loc[3, '제품명'] = '벨트'
>>> df.loc[3, '담당자'] = 'A'
>>> df.loc[3, '지역'] = '가'
>>> df.loc[3, '1분기'] = 180
>>> df.loc[3, '2분기'] = 150
>>> df.loc[3, '3분기'] = 200
>>> df.loc[3, '4분기'] = 250 

>>> df
   
   제품명 담당자 지역    1분기    2분기    3분기    4분기
0   시계   A  가  198.0  123.0  120.0  137.0
1   구두   A  가  273.0  241.0  296.0  217.0
2  핸드백   A  가  385.0  316.0  355.0    0.0
3   벨트   A  가  180.0  150.0  200.0    NaN




위에서는 특정 위치에 데이터값을 추가하는 방법으로 데이터 행 하나를 추가했다. 
결과를 보면 마지막 행의 데이터가 추가된 것을 확인할 수 있다.
만약 특정 열의 데이터값 전체를 변경하려면 다음과 같이 수행합니다

df[column_name] = value


다음은 '담당자' 행의 모든 'A'를 'Andy'로 변경히는 묘드입니 다.

>>> df['담당자'] = 'Andy'

>>> df 



새롭게 변경된 데이터 내용은 다음과 같이 다른 이름('담당자별_판매량_Andy사원_new.xlsx')으로 저장할
수 있다. 


>>> excel_file_name = 'D:/py/data/담당자별__판매량_Andy사원_new.xlsx'

>>> new_excel_file = pd.ExcelWriter(excel_file_name, engine= 'xlsxwriter')

>>> df.to_excel(new_excel_file, index=False)

>>> new_excel_file.save()

>>> glob.glob(excel_file_name)
['D:/py/data/담당자별-판매량_Andy사원_new.xlsx']


지정된 폴더에 새로운 엑셀 파일('담당자별_판매량_Andy사원_new.xlsx')이 생성되었다. 

------------------------------------------------------------------------------------------------


▣ 여러 개의 엑셀 파일에서 데이터 수정하기

앞에서 하나의 엑셀 파일에서 데이터를 수정하고 다른 이름의 엑셀 파일로 저장하는 방법을 알아보았다. 

이번에는 여러 개의 엑셀 파일에 대해 데이터를 수정한 후에 각각 다른 이름으로 저장하는 방법을 알아보겠다. 앞의 코드에서 파일명을 다른 이름으로 저장하기 위해 담당자별_판매량_Andy사원_new.xlsx' 라고 파일명을 지정했다. 하지만 파일이 많아지면 파일명을 일일이 지정하기가 쉽지 않다.

 
이때 사용할 수 있는 것이 내장 모듈인 re의 sub() 이다. 내장 모듈인 re는 정규 표현식을 위한 모듈로 문자열 처리에 다양하게 활용할 수 있지만, 여기서는 문자열을 교체할 때 사용하는 sub()만 살펴보도록 한다.

>>> import re
>>> re.sub(pattern, repl, string)


위는 문자열(string) 에서 패턴(pattern)을 찾아서 대체 문자열(repl)로 바꾼 후에 문자열을 반환한다.

다음 코드는 sub()를 이용해 지정된 문자열에서 패턴('.xlsx')을 찾아서 대체 문자열('2.xlsx')로 변경함으로써 지정된 파일명을 새로운 파일명으로 변경하는 예를 보여준다.

>>> import re
>>> file_name = "D:/py/data/담당자별_판매량_Becky사원.xlsx"
>>> new_file_name = re.sub(".xlsx", "2.xlsx", file_name)
>>> new_file_name

'D:/py/data/담당자별_판매량_Andy사원2.xlsx'



다음은 여러 개의 엑셀 파일에서 기존에 'A', 'B', 'C'로 돼 있던 담당자 이름을 각각 'Andy', 'Becky', 'Chris'로 변경하고 새로운 파일명으로 저장하는 코드이다. 


>>> import glob
>>> import re
>>> import pandas as pd

# 원하는 자열이 포함된 파일을 검색해 리 스트를 할당한다.
>>> excel_data_files1 = glob.glob("D:/py/data/담당자별_판매량_*사원.xlsx")


# 리스트에 있는 엑셀 파일 만큼 반복 수행한다
>>> for f in excel_data_files1 :


# 엑셀 파일에서 DataFrame 형식으로 데이터를 가져온다.
	df = pd.read_excel(f)

# 특정 열의 값을 변경한다.(1열의 담당자를 지정된 이름으로 변경한다)
	if(df.loc[1, '담당자']=='A') : 
		df['담당자']='Andy'
	elif(df.loc[1, '담당자']=='B') :
		df['담당자']='Becky'
	elif(df.loc[1, '담당자']=='C') :
		df['담당자']='Chris'


# 엑셀 파일 이름에서 지정된 문자열 패턴을 찾아서 파일명을 변경한다.
	f_new = re.sub(".xlsx", "2.xlsx", f)
	print(f_new)


# 수정된 데이터를 새로운 이름의 엑셀 파일로 저장한다.
	new_excel_file = pd.ExcelWriter(f_new, engine='xlsxwriter')
	df.to_excel(new_excel_file, index=False)
	new_excel_file.save() 


위의 코드를 수행하면 원하는 폴더에서 특정 문자열이 포함된 엑셀 파일을 찾아서 리스트로 할당한 후
그 엑셀 파일의 데이터를 하나씩 읽어서 특정 열의 데이터값을 변경한 후에 다른 이름으로 저장한다.

결과를 보면 기존 엑셀 파일에서 이름을 가져와 새로운 엑셀 파일이 생성된 것을 볼 수 있다. 
위의 출력 결과는 새로운 엑셀 파일명만 출력한 것이고 실제로 엑셀 파일이 생성됐는지는 다음 코드로 확인할
수 있다. 


>>> glob.glob("D:/py/data/담당자별_판매량_*사원?.xlsx")

-----------------------------------------------------------------------------


☞ 엑셀의 필터 기능 수행하기

엑셀로 작성된 데이터에서 특정 부분만 선별해서 보고 싶을 때 엑셀의 필터 기능을 이용한다. 
앞에서 만든 통합된 엑셀 파일('담당자별_판매량_통합.xlsx')에서 제품명 중 핸드백의 판매량만을 보려면 다음과 같은 방법으로 수행할 할 수 있다. 


1. '제품명' 셀을 마우스로 클릭해서 지정한 후 데이터 탭에서 [필터] 아이콘을 클릭한다.
2. 각 머리글에 화살표가 나타나는데 '제품명' 셀에 있는 화살표를클릭한다.
3. '제품명'에 있는 여러 항목이 나타나는데 이 가운데 '핸드백' 만 선택한다.
4. [확인]을 누르면 '핸드백' 제품에 대한 데이터만 나온다.



엑셀에서 필터 기능을 이용해 핸드백 제품에 대한 데이터만 선택했다. 

이제 파이씬을 이용해 엑셀의 필터 기능을 수행하는 방법을 알아본다.

우선 앞에서 통합한 엑셀 파일('담당자별_판매량_통합.xlsx')을 읽어온다.


>>> import pandas as pd

>>> df = pd.read_excel("D:/py/data/담당자별_판매량_통합.xlsx")

>>> df 
   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331
3   시계   B  나  154  108  155  114
4   구두   B  나  200  223  213  202
5  핸드백   B  나  350  340  377  392
6   시계   C  다  168  102  149  174
7   구두   C  다  231  279  277  292
8  핸드백   C  다  365  383  308  323



변수 df에서 '제품명'의 열만 추출하려면 다음과 같이 코드를 수행하면 된다. 

>>> df['제품명']
0     시계
1     구두
2    핸드백
3     시계
4     구두
5    핸드백
6     시계
7     구두
8    핸드백
Name: 제품명, dtype: object


이제 비교연산자중 == 로 '제품명'이 있는 열에서 '핸드백' 문자열이 있는지 검사한다. 


>>> df['제품명'] == '핸드백'

0    False
1    False
2     True
3    False
4    False
5     True
6    False
7    False
8     True
Name: 제품명, dtype: bool


결과를 보면 '제품명' 이 있는 열에서 '핸드백' 문자열과 일치하면 True, 일치하지 않으면 False가 반환된
것을 확인할 수 있다. 이 결괴를 df [ ]에 넣으면 True에 해당하는 행만 출력하므로 '제품명' 열에 '핸드백' 문자열이 있는 행만 추출할 수 있다. 

코드는 다음과 같다.

>>> handbag = df[df['제품명'] == '핸드백']

>>> handbag 
       
   제품명 담당자 지역  1분기  2분기  3분기  4분기
2  핸드백   A  가  385  316  355  331
5  핸드백   B  나  350  340  377  392
8  핸드백   C  다  365  383  308  323


이제 변수 df에서 '제품명' 열에서 '핸드백' 문자열과 일치하는 행만 추출했다. 
이것은 엑셀의 필터 기능을 이용한 결과와 같다.

DataFrame 데이터에서 원히는 문자열을 찾는 또 다른 방법도 있다. 
바로 DataFrame의 isin()을 이용하는 것이다. 

활용법은 다음과 같다. 

DataFrame_data.isin(values)


이렇게 하면 DataFrame 데이터(DataFrame data)에서 values가 들어 있는 값이 있으면 True를, 없으면 False를 반환한다. values는 리스트나 딕셔너리, 그리고 pandas의 Series나 DataFrame 타입의 데이터가 될 수 있다.

이제 isin( )을 이용해 '제품명' 열에서 '핸드백' 문자열이 있는 행만 추출해보겠다.

>>> import pandas as pd

>>> df = pd.read_excel('D:/py/data/담당자별_판매량_통합.xlsx')

>>> handbag1 = df[df['제품명'].isin(['핸드백'])]

>>> handbag1 
   제품명 담당자 지역  1분기  2분기  3분기  4분기
2  핸드백   A  가  385  316  355  331
5  핸드백   B  나  350  340  377  392
8  핸드백   C  다  365  383  308  323



▣ 필터링
엑셀 필터에서 항목을 여러 개 선택하는 것과 유사하게 pandas의 DataFrame 데이터에서도 문자열을 여러 개 선택해 원하는 행을 추출할 수 있다. 
이를 위해 앞에서 살펴본 열에서 문자열 검사의 조건문을 여러 개로 확장하는 방법과 isin()의 인자(values)에 여러 항목을 갖는 리스트를 입력하는 방법이 있다.

pandas에서는 논리곱(and), 논리합(or), 논리 부정(not) 연산을 위해 각각 '&', '!', '∼' 기호를 이용 한다. 
다음 코드는 '제품명' 열에서 '구두'와 '핸드백' 문자열을 검색해 논리합 연산(|)을 수행하는 코드이다. 
논리합 연산의 결과로 '제품명' 열에서 두 개의 문자열('구두'와 '핸드백')을 포함한 행이 모두 선택된다.

>>> df[(df['제품명']=='구두') | (df['제품명']=='핸드백')] 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331
4   구두   B  나  200  223  213  202
5  핸드백   B  나  350  340  377  392
7   구두   C  다  231  279  277  292
8  핸드백   C  다  365  383  308  323



▣ 조건을 설정해 원하는 행만 선택하기
앞에서 지정된 열에서 원하는 문자열이 있는 행을 선택하는 방법을 살펴보았다. 
이 밖에도 지정된 열에서 특정 데이터와의 관계를 지정할 수도 있다. 
앞에서 DataFrame 형식으로 읽어온 엑셀 데이터를 대입한 변수 df에서 '3분기' 의 판매량이 250 이상인 행만 추출하려면 다음과 같이 수행하면 된다. 

>>> df[(df['3분기'] >= 250)]

   제품명 담당자 지역  1분기  2분기  3분기  4분기
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331
5  핸드백   B  나  350  340  377  392
7   구두   C  다  231  279  277  292
8  핸드백   C  다  365  383  308  323



또한 df 데이터에서 '제품명' 이 '핸드백' 이면서 '3분기' 의 판매량이 350 이상인 행만추출하려면 
다음과 같이 조건문을 조합해서 수행하면 된다. 
두 개의 조건을 모두 만족하는 항목을 찾기 위해서는 논리곱 연산(&)을 수행한다.

>>> df[(df['제품명'] == '핸드백') & (df['3분기'] >= 350)] 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
2  핸드백   A  가  385  316  355  331
5  핸드백   B  나  350  340  377  392




▣ 원하는 열만 선택하기

엑셀에서는 '숨기기' 기능을 이용해 원히는 열만 선택해 볼 수 있다. 
앞에서 이용했던 '담당자별_판매량_Andy사원.xlsx' 파일에서 '담당자'와 '지역' 열을 숨기려면 엑셀의 '숨기 기' 기능을 이용해 해당 열을 숨길 수 있다. 


엑셀 파일의 데이터를 pandas의 DataFrame 형식으로 가져오면 엑셀의 숨기기 기능처럼 원하는 열만 선택할 수 있다. 이를 위해 먼저 '담당자별_판매량_Andy사원.xlsx' 엑셀 파일을 DataFrame 형식으로 읽어온다.

>>> import pandas as pd

>>> df = pd.read_excel('D:/py/data/담당자별_판매량_Andy사원.xlsx')

>>> df 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
1   구두   A  가  273  241  296  217
2  핸드백   A  가  385  316  355  331



DataFrame 데이터에서 특정 열만 선택하려면 다음과 같이 원하는 열의 헤더(header)를 리스트 형식으로 지정한다.

>>> df[['제품명', '1분기', '2분기', '3분기', '4분기']] 

   제품명  1분기  2분기  3분기  4분기
0   시계  198  123  120  137
1   구두  273  241  296  217
2  핸드백  385  316  355  331



위의 코드에서 출력하려는 열의 헤더(header)를 지정해 df 변수에서 '담당자'와 '지역' 열을 제외한 나머지 열을 가져왔다. 이 방법 외에 다음처럼 행과 열의 위치를 숫자로 지정해 원하는 위치의 데이터만 선택하는 방법도 있다. 

DataFrame_data.iloc[row_num, col_num]


여기서 row_num과 col_num은 행과 열의 위치를 항목으로 갖는 리스트이다. 위치를 표시하는 숫자는 0부터 시작한다. 만약 리스트 대신에 ':' 를 입력하면 행이나 열 전체를 선택한다.
다음은 iloc를 이용해 원하는 열만 선택한 예이다.

>>> df.iloc[:, [0,3,4,5,6]] 

   제품명  1분기  2분기  3분기  4분기
0   시계  198  123  120  137
1   구두  273  241  296  217
2  핸드백  385  316  355  331




위의 코드에서 row_num은 ';' 를 입력해 모든 행을 선택하고 col_num은 '[0,3,4,5,6]'을 입력해 해당 열만
선택했다. 결과를 보면 앞에서 열의 헤더(header)를 리스트 형식으로 직접 지정한 것과 같다.

참고로 다음과 같이 행의 위치를 지정해서 원하는 행만 선택할 수도 있다.


>>> df.iloc[[0,2],:] 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
0   시계   A  가  198  123  120  137
2  핸드백   A  가  385  316  355  331





☞ 엑셀 데이터 계산하기

엑셀에서 수행하는 계산 기능을 파이썬에서는 어떻게 수행하는지 살펴본다. 
다양한 계산 기능을 수행할 수 있지만 여기서는 데이터 테이블에서 행별로 혹은 열별로 합계를 구하는 방법을 알아본다.
 

▣ 행 데이터의합계구하기
앞에서 만든 통합된 엑셀 파일('담당자별_판매량_통합.xlsx')에서 필터 기능으로 핸드백 항목만 선택한 후 분기별 판매량을 이용해 지역별 연간 판매량을구하려고 한다면 행 데이터의 합계를 구해야 한다.

엑셀에서 이 작업은 다음과 같은 방법으로 수행할 수 있다.

1. 행 데이터가 있는 마지막 셀 다음의 빈 셀을 마우스로 선택한다.
2. 수식 탭에서 [자동 합계] 아이콘을 마우스로 클릭하면 SUBTOTAL이 나오면서 합계를 위한 셀들이 자동으로 선택된다.
3. SUBTOTAL을 SUM'범위')로 수정'하고 엔터를 누르면 행 데이터의 합계가 표시된다.
4. 다른 행의 합계도 구하기 위해 이미 합계가 계산된 셀을 마우스로클릭한 후에 사각형 오른쪽 아래의 점을 마우스로 선택한다.
5. 마우스로 드래그하면 다른 행도 자동으로 합계가 계산된다.



파이썬에서는 실습을 위해 앞에서 사용한 통합 데이터에서 핸드백의 분기별 판매량을 활용한다. 

코드는 다음과 같다.

>>> import pandas as pd

>>> df = pd.read_excel('D:/py/data/담당자별_판매량_통합.xlsx')

>>> handbag = df[(df['제품명']=='핸드백')]

>>> handbag 

   제품명 담당자 지역  1분기  2분기  3분기  4분기
2  핸드백   A  가  385  316  355  331
5  핸드백   B  나  350  340  377  392
8  핸드백   C  다  365  383  308  323



위 코드를 통해 핸드백 판매량 데이터만 DataFrame 형태로 변수 handbag에 할당된다. 

이제 DataFrame 데이터에 적용할 수 있는 sum( )을 이용해 합계를 구해보겠다. 

활용법은 다음과 같다.

DataFrame_data.sum([axis = 0(기본) or 1])


위 코드를 실행하면 DataFrame 데이터의 축별 합계를 구할 수 있다. 

여기서 'sum( )' 의 인자인 axis가 0이면 열 방향으로 합계가 구해지고, axis가 1이면 행 방향으로 합계가 구해진다. 만약 인자가 없으면 'axis = 0' 이다.

변수 'handbag' 에서 핸드백의 지역별 연간 판매량을 구하려면 행 축의 합계를 구하면 되므로 'sum( )' 의
인자로 'axis=1'을 입력한다. 

코드를 실행한 결과는 다음과 같다.

>>> handbag.sum(axis=1) 

2    1387
5    1459
8    1379
dtype: int64




위에서 구한 행 축의 합계를 이용해 다음과 같이 열의 헤더가 '연간판매량'인 DataFrame 데이터를 생성한다.

>>> handbag_sum = pd.DataFrame(handbag.sum(axis=1), columns = ['연간판매량'])

>>> handbag_sum 

   연간판매량
2   1387
5   1459
8   1379





이제 다음과 같이 앞에서 살펴본 DataFrame의 join()을 이용해 기존의 DataFrame 데이터 handbag과 합계를 구한 DataFrame 데이터인 handbag_sum을 가로 방향으로 통합한다.

>>> handbag_total = handbag.join(handbag_sum)

>>> handbag_total

   제품명 담당자 지역  1분기  2분기  3분기  4분기  연간판매량
2  핸드백   A  가  385  316  355  331   1387
5  핸드백   B  나  350  340  377  392   1459
8  핸드백   C  다  365  383  308  323   1379



위의 결과를 보면 기존의 데이터에 합계를 구한 열이 잘 통합됐음을 확인할 수 있다.

지금까지 합계를 구하는 방법을 살펴봤다. 
구한 합계를바탕으로 어느 지역의 연간 판매량이 많은지 한눈에 보려면 데이터를 오름치순 혹은 내림치순으로 정렬하는 것이 좋다. 

이번에는 특정 데이터를 기준으로 오름치순이나 내림차순으로 정렬하는 방법을 알아보겠다.

엑셀은 정렬을 위한 기준 열을 선택한 후 [데이터] 탭에서 [오름차순 정렬] 혹은 [내림차순 정렬] 아이콘을 클릭해 데이터를 정렬한다.


파이썬에서는 오름차순이나 내림차순으로 정렬을 위해 다음과 같이 DataFrame 데이터의 sort_values( )를 이용한다.

DataFrame_data.sort_values(by[, axis=B(기본) or 1, ascending=True(기본) or False])


인자 by에는 정렬하려는 데이터의 이름을 문자열이나 문자열 리스트로 입력한다. 
인자 axis에 0을 입력하면 열 방향을 기준으로, 1을 입력하면 행 방향을 기준으로 정렬이 이루어진다. 

만약 인자 axis가 없으면 'axis=B' 이다. 

인자 ascending에 True를 입력하면 오름차순으로 정렬하고, False를 입력하면 내림차순으로 정렬한다. 
인자 ascending을 입력하지 않으면 기본적으로 'ascending=True' 가 된다.

앞의 코드에서 변수 handbag_total에 대해 '연간판매량' 열을 기준으로 오름차순으로 정렬하려면 

다음과 같이 sort_values()의 인자 by에는 '연간판매량'을 입력하고 ascending에는 True를 입력한다. 
인자 axis는 0이므로 입력하지 않아도 된다.

>>> handbag_total.sort_values(by='연간판매량', ascending=True)

   제품명 담당자 지역  1분기  2분기  3분기  4분기  연간판매량
8  핸드백   C  다  365  383  308  323   1379
2  핸드백   A  가  385  316  355  331   1387
5  핸드백   B  나  350  340  377  392   1459





▣ 열 데이터의 합계 구하기

이번에는 데이터 테이블에서 열 데이터의 합계를 구하는 방법을 알아본다. 
데이터는 앞에서 사용한 핸드백의 분기별 판매량을 다시 이용한다.

먼저 엑셀에서 열 데이터 합계를 구하는 방법에 대해 알아본다. 
엑셀에서 열 데이터가 있는 마지막 셀 다음의 빈 셀을 마우스로 선택한 후 [수식] 탭에서 [자동 합계] 아이콘을 누르면 SUBTOTAL이 나오면서 합계를 위한 셀이 자동으로 선택된다. 

엔터를 누르면 선택된 데이터의 합계를 구한다. 
이제 앞에서 수행했던 방법과 마찬가지로 합계가 계산된 셀을 마우스로 선택한 후에 사각형 오른쪽 아래의 점을 마우스로 선택하고 드래그하면 지동으로 합계를 계산한다. 그러면 분기별 합계와 지역별 연간판매량의 합계가 모두 구해진다. 



이제 파이썬으로 열 데이터 합계를 구해 보겠다. 앞에서 사용한 변수 handbag_total의 열 데이터 합계는 DataFrame의 sum()을 이용해 다음과 같이 구할 수 있다.

>>> handbag_total.sum() 

제품명      핸드백핸드백핸드백
담당자            ABC
지역             가나다
1분기           1100
2분기           1039
3분기           1040
4분기           1046
연간판매량         4225
dtype: object



위의 코드에서 열 데이터의 합을 구히는 것이므로 sum()의 인자는 아무것도 넣지 않았다. 
원하는 합계 외에 '제품명', '담당자', '지역' 열에 있는 문자열의 합계도 출력됐다. 

분기 별 합계를 구해 보겠다. 
앞의 행 데이터 합계를 구할 때와 마찬가지로 위에서 구한 열 데이터의 합계를 이용해 다음과 같이 열의 헤더가 '합계'인 DataFrame 데이터를 생성한다.

>>> handbag_sum2 = pd.DataFrame(handbag_total.sum(), columns=['합계'])

>>> handbag_sum2 

              합계
제품명    핸드백핸드백핸드백
담당자          ABC
지역          가나다
1분기         1100
2분기         1039
3분기         1040
4분기         1046
연간판매량    4225



이제 다음과 같이 앞에서 살펴본 DataFrame의 append()을 이용해 변수 handbag_total의 데이터에 열 데이터의 합계를 구한 handbag_sum2을 세로 방향으로 추가한다. 

이때 handbag_sum2의 행과 열을 바꾸기 위해서 DataFrame_data.T를 이용한다.

>>> handbag_total2 = handbag_total.append(handbag_sum2.T)

>>> handbag_total2 

          제품명  담당자   지역   1분기   2분기   3분기   4분기 연간판매량
2         핸드백    A    가   385   316   355   331  1387
5         핸드백    B    나   350   340   377   392  1459
8         핸드백    C    다   365   383   308   323  1379
합계  핸드백핸드백핸드백  ABC  가나다  1100  1039  1040  1046  4225




위의 결괴에서 보듯이 기존 데이터에 열 데이터를 합한 결과가 잘 통합되었다. 
하지만 새로 통합된 부분에서 '제품명', '담당자', '지역'에 필요 없는 문자열이 들어있다. 

이는 다음과 같은 방법으로 해당 항목의 문자열을 변경해서 해결할 수 있다.

>>> handbag_total2.loc['합계', '제품명'] = '핸드백'

>>> handbag_total2.loc['합계', '담당자'] = '전체'

>>> handbag_total2.loc['합계', '지역'] = '전체'

>>> handbag_total2 

    제품명 담당자  지역   1분기   2분기   3분기   4분기 연간판매량
2   핸드백   A   가   385   316   355   331  1387
5   핸드백   B   나   350   340   377   392  1459
8   핸드백   C   다   365   383   308   323  1379
합계  핸드백  전체  전체  1100  1039  1040  1046  4225





코드로 작성한다.

import pandas as pd

# 엑셀 파일을 pandas의 DataFrame 형식으로 읽어온다
df = pd.read_excel('D:/py/data/담당자별_판매량_통합.xlsx') 

# 제품명 열에서 핸드백이 있는 행만 선택한다.
product_name = '핸드백'
handbag = df[(df['제품명'] == product_name))


# 행별로 합계를 구하고 마지막 열 다음에 추가한다
handbag_sum = pd.DataFrame(handbag.sum(axis=1), columns = ['연간판매량'])
handbag_total = handbag.join(handbag_sum)


# 열 별로 합해 분기 별 합계와 연 간판매량 합계를 구하고 마지막 행 다음에 추가한다.
handbag_sum2 = pd.DataFrame(handbag_total.sum(), columns=['합계'])
handbag_total2 = handbag_total.append (handbag_sum2.T)


# 지정된 항목의 문자열을 변정한다
handbag_total2.loc['합계', '제품명'] = product_name
handbag_total2.loc['합계', '담당자'] = '전체'
handbag_total2.loc['합계', '지역'] = '전체'


# 결과를 확인한다.
handbag_total2 

    제품명 담당자  지역   1분기   2분기   3분기   4분기 연간판매량
2   핸드백   A   가   385   316   355   331  1387
5   핸드백   B   나   350   340   377   392  1459
8   핸드백   C   다   365   383   308   323  1379
합계  핸드백  전체  전체  1100  1039  1040  1046  4225



위 코드에서 product_name 변수에 할당하는 값을 '핸드백' 이 아니라 '시계' 나 '구두'로 변경하면 각 제품
에 대해 합계를 간단히 구할 수 있다. 이렇게 파이썬으로 엑셀 파일에서 데이터를 읽어서 처리하는 코드를 작성하면 항목이 변경되거나 파일이 많아도 데이터를 편하고 빠르게 처리할 수 있다.

----------------------------------------------------------------------------------------


☞ 엑셀 데이터의 시각화

엑셀에서는 데이터를 시각화하기 위해 엑셀 차트 기능을 제공한다. 하지만 엑셀 파일에 차트를 생성하려면 마우스와 키보드로 데이터의 범위와 차트의 종류를 일일이 지정해야 한다. 엑셀 파일이 몇 개 안 될 때는 이런 작업을 하는데 큰 문제가 없지만 엑셀 파일이 많아서 이런 작업을 반복해야 한다면 시간이 오래 걸리고 쉽지 않을 것이다. 

이번에는 이런 반복적인 작업을 파이썬을 이용해 손쉽고 빠르게 수행하는 방법을 알아보겠다.

엑셀 데이터의 시각화를 위해 두 가지 방법으로 엑셀 파일에 그래프 를 추가할 수 있다. 

첫 번째는 파이썬에서 생성한 그래프를 엑셀 파일에 넣는 방법이고, 
두 번째는 엑셀의 차트 기능을 파이썬으로 수행하는방법이다. 



▣ 그래프를 엑셀 파일에 넣기

앞에서 matplotlib과 pandas를 이용해 데이터를 시각화하는 방법을 살펴보았다. 
또한 생성한 그래프를 별도의 이미지 파일로 저장하는 방법도 알아보았다. 
이렇게 생성한 이미지 파일은 다음의 방법을 이용해 데이터와 함께 엑셀 파일에 추가할 수 있다.

다음은 데이터와 이미지를 엑셀 파일에 넣는 방법이다. 


(1) pandas의 ExcelWriter 객체 생성
excel_writer = pd.ExcelWriter('excel output.xlsx', engine='xlsxwriter')


(2) DataFrame 데이터를 지정된 엑셀 시트(Sheet)에 쓰기
df.to_excel(excel_writer, index=False 혹은 True, sheet_name= '시트이름')


(3) ExcelWriter 객체에서 워크시트(worksheet) 객체 생성
worksheet = excel_writer.sheets['시트이름']


(4) 워크시트에 차트가 들어갈 위치를 지정해 이미지 넣기
worksheet.insert_image('셀위 치', image_file[,{'x_scale': x_scale_num, 'y_scale ': y_scale_num}])

혹은

worksheet.insert_image(row_num, col_num, image_file[,{'x_scale': x_scale_num, 'y_scale': y_scale_num}])


(5) ExcelWriter 객제를 닫고 엑셀 파일 출력
excel_writer.save() 



위에서 (1), (2), (5) 번의 내용은 앞에서 살펴본 '데이터를 엑셀 파일로 쓰기'와 같다. 

(3)의 워크시트를 생성할 때 (2)에서 sheet_name에 지정한 시트 이름을 그대로 사용해야 한다. 

(4)에서는 insert_image()를 이용해 이미지의 좌측 상단이 위치할 셀의 위치와 경로를 포함한 이미지 파일명 (image_file)을 지정한다. 셀의 위치는 B1과 같이 엑셀의 셀을 지정할 수 있고 0부터 시작되는 숫자로 행(row_num)과 열(col_num)을 지정할 수도 있다. 

x_scale과 y_scale에 각각 숫자를 지정하면 이미지의 가로와 세로 배율을 조절할 수 있다. 
이 숫자가 1보다 작으면 그 비율만큼 원래 이미지보다 작아지고 1보다 크면 그 값에 비례해 커진다.
위의 방법이 다소 복잡할 수 있으나, 정형화된 방법이므로 한 번만 잘습득해 놓으면 상황에 따라 코드 중
일부만 수정해 사용할 수 있다. 

이제 위의 방법으로 엑셀 파일에 그래프를 추가하기 위해 다음과 같이 시간에 따른 제품1과 제품2의 생산량 데이터를 DataFrame 형식으로 생성한다.

>>> import matplotlib.pyplot as plt

>>> import pandas as pd

>>> sales = { '시간': [9, 10, 11, 12, 13, 14, 15],
	     '제품1': [10, 15, 12, 11, 12, 14, 13],
	     '제품2': [9, 11, 14, 12, 13, 10, 12]}

>>> df = pd.DataFrame(sales, index = sales['시간'], columns = ['제품1', '제품2'])

>>> df.index.name = '시간'  #index 라벨 추가

>>> df 

    제품1  제품2
시간          
9    10    9
10   15   11
11   12   14
12   11   12
13   12   13
14   14   10
15   13   12





위의 데이터를 이용해 '시간' 데이터는 x축으로, '제품1'과 '제품2'의 생산량은 y축으로 지정한 그래프를 생성한다. 
생성된 그래프는 지정된 폴더('d:/py/data/)에 이미지 파일('fig_for_excel1.png')로 저장하겠다. 

코드는 다음과 같다.

>>> import matplotlib

>>> import pandas as pd

>>> matplotlib.rcParams['font.family'] = 'Malgun Gothic'	# '맑은 고딕' 으로 설정
>>> matplotlib.rcParams['axes.unicode_minus'] = False

>>> product_plot = df.plot(grid = True, style = ['-*', 'o'], title='시간대별 생산량')
>>> product_plot.set_ylabel("생산량")

>>> image_file = 'D:/py/data/fig_for excel1.png' 		# 이미지 파일 경로 및 이름
>>> plt.savefig(image_file, dpi = 400) 				# 그래프를 이미지 파일로 저장

>>> plt.show() 




다음으로 엑셀 파일에 데이터와 이미지 파일을 추가하겠다. 

여기서 생성하려는 엑셀 파일('data_image_to_excel.xlsx')은 지정된 폴더('D:/py/data/')에 있다고 가정하고 넣으려는 이미지 파일의 경로와 이름은 앞에서 지정한 변수 image_file의 값을 이용하겠다. 


코드는 다음과 같다.


(1) pandas의 ExcelWriter 객체 생성
excel_file = 'D:/py/data/data_image_to_excel.xlsx'
excel_writer = pd.ExcelWriter(excel_file, engine='xlsxwriter')


(2) DataFrame 데이터를 지정된 엑셀 시트(Sheet)에 쓰기
df.to_excel(excel_writer, index=True, sheet_name= 'Sheet1')


(3) ExcelWriter 객체에서 워 크시트(worksheet) 객제 생성
worksheet = excel_writer.sheets['Sheet1']


(4) 워크시트에 차트가 들어 갈 위치를 지정해 이미지 넣기
worksheet.insert_image('D2', image_file, {'x_scale': 0.7, 'y_scale': 0.7})
# worksheet.insert_image(1, 3, image_file, {'x_scale': 0.7, 'y_scale': 0.7})


(5) ExcelWriter 객체를 닫고 엑셀 파일 출력
excel_writer.save() 



위 코드의 worksheet.insert_image() 에서 이미지가 들어갈 위치는 엑셀 파일의 셀 지정 방식으로 D2로 지정하였다. 
앞의 알파벳은 엑셀에서 열의 위치를 나타내며 뒤의 숫자는 행의 위치를 나타낸다. 

위치는 0부터 시작하는 행과 열의 위치 지정 방식으로 입력할 수도 있다. 또한 x_scale과 y_scale에 값을 지정해 이미지의 배율을 설정해 이미지 크기를 조절했다. 위의 코드로 생성된 엑셀 파일을 열면 데이터와 그래프 이미지가 들어간 것을 볼 수 있다. 

그래프 이미지가 들어갈 시작 지점 위치를 엑셀 파일의 셀 지정 방식과 숫자로 행(row_num)과 열(col_num)을 표시하는 방식을 모두 표시했다. 위의 코드의 (4)부분에는 숫자로 행과 열의 위치를 표시하는 방식의 코드는 주석으로 처리했으나 셀 지정 방식 대신 이 부분을 사용해도 된다. 어느 것을 사용해도 그래프 이미지의 시작 지점 위치는 같다. 

 

▣엑셀 차트 만들기
엑셀은 숫자 데이터를 그래프로 보기 쉽게 표시하는 차트 기능을 제공한다. 
이번에는 파이썬으로 엑셀의 차트 기능을 수행하는 방법을 살펴보겠다. 

이를 위한 단계는 다음과 같다.


(1) pandas의 ExcelWriter 객체 생성
excel_writer = pd.ExcelWriter('excel_output.xlsx', engine = 'xlsxwriter')


(2) DataFrame 데이터를 지정된 엑셀 시트(Sheet)에 쓰기
df.to_excel(excel_writer, index=false 혹은 True, sheet_name='시트이름')


(3) ExcelWriter 객체에서 워크북(workbook)과 워크시트(worksheet) 객체 생성
workbook = excel_writer.book
worksheet = excel_writer.sheets['시트이름']


(4) 차트 객체 생성 (원하는 차트의 종류 지정)
chart = workbook.add_chart({'type'; '차트유형'})


( 5) 차트를 샘성하기 위한 데이터값의 범위 지정
chart.add_series({'values': values_range})


(6) 워크시트에 차트가 틀어갈 위치 지정해 차트 넣기
worksheet.insert_chart('셀 위치', chart)

혹은

worksheet.insert_chart(row_num, col_num, chart)


(7) ExcelWriter 객체를 닫고 엑셀 파일을 출력 
excel_writer.save()




파이썬으로 엑셀의 차트 기능을 수행하는 방법은 앞에서 그래프 이미지를 엑셀 파일에 추가하는 방법과 유사하다. 
단, (4)에서 차트의 종류를 선택하고 (5)에서 데이터값의 범위를 지정하고 (6)에서 차트가 들어갈 위치를 지정하는 것이 다르다. 위의 (4)에서 add_chart()를 이용해 엑셀에서 그릴 수 있는 차트 유형 ('type')을 정리하면 다음과 같다.

[엑셀에서 그릴 수 있는 차트 유형]

===========================================
지정 가능한 차트 유형 	엑셀 차트 유형
-------------------------------------------
area 			영역형 차트
bar 			가로 막대형 차트
column 			세로 막대형 차트
line 			꺾은 선형 차트
pre 			원형 차트
dcughnut 		도덧형 차트
scatter 		분산형 차트
stc2k 			주식형 차트
radar 			방사형 차트
===========================================



또한 (5)에서 add_series()의 데이터 값('values') 범위는 두 가지 방법으로 지정할 수 있다. 

첫 번째 방법은 엑셀의 셀 지정 방식인 ‘=시트이름!시작셀위치.끝셀위치'를 이용하는 것이고, 

두 번째 방법은 pandas에서 행과 열을 지정하는 방식으로 [시트이름, 시작행 / 시작열 / 끝행/ 끝열]을 이용하는 것이다. 하나의 그래프에 여러 데이터의 값을 차트로 그리려면 데이터값의 범위를 다르게 해서 (5)의 add_series()를 여러 번 수행한다. 

(6) 에서 차조르가 들어갈 위치를 insert_chart( ) 에 지정한다.


이제 파이썬에서 엑셀의 차트를 생성하기 위해 앞에서 만든 DataFrame 데이터 변수 df를 이용한다. 

다음은 변수 df로 엑셀 차트를 생성해서 엑셀 파일에 추가하는 코드이다. 
여기서 엑셀 파일 이름은 'data_chart_in_excel.xlsx'로 지정하겠다.

# (1) pandas의 ExcelWriter 객체 생성
>>> excel_chart = pd.ExcelWriter('D:/py/data/data_chart_in_excel.xlsx', engine='xlsxwriter')


# (2) DataFrame 데이터를 지정된 엑셀 시트(Sheet)어| 쓰기
>>> df.to_excel (excel_chart, index=True, sheet_name='Sheet1')


# (3) ExcelWriter 객체에 서 워 크북(workbook)과 워크시트(worksheet) 객체 생 성
>>> workbook = excel_chart.book
>>> worksheet = excel_chart.sheets['Sheet1']


# (4) 차트 객 체 샘성(원하는 차트의 종류 지정)
>>> chart = workbook.add_chart({'type': 'line'})


# (5) 차트 생성을 위 한 데이터값의 범위 지정
>>> chart.add_series({'values': '=Sheet1!$B$2:$B$8'})
>>> chart.add_series({'values': '=Sheet1!$C$2:$C$8'})


# (6) 워크시트에 차트가 들어 갈 위치를 지정해 차트 넣기
>>> worksheet.insert_chart('D2', chart)


# (7) ExcelWri ter 객체를 닫고 엑셀 파일 출력
>>> excel_chart.save() 



위 코드 (4)에서 차트 객체를 생성할 때 add_chart()의 유형 'type')은 꺾은 선형 차트('line')를 선택했다. 
또한 (5)에서 데이터값의 범위는 엑셀의 셀 지정 방식으로 지정했다. 

두 개의 열을 그래프로 그리기 위해 데이터값의 범위를 다르게 지정해 add_series()를 두 번 수행했다. 

(6)에서는 셀 지정 방식으로 차트가 들어갈 위치(02)를 지정했습니다. 



출력된 엑셀 차트를 보면 '제품1'과 '제품2'의 생산량은 잘 표시됐으나 X축의 값은, '시간' 열이 아니라, 
1부터 증가하는 숫자로 되어 있고 범례도 제대로 표시되지 않았다. 

차트에서 x축의 값을 원하는 열로 지정하고 범례를 제대로 표시하려면 다음처럼 add_series( )에 인자 categories와
name을 추가하고 데이터 값의 범위를 지정한다. 


# (5) 차트 생성을 위한 데이터값의 범위 지정
>>> chart.add_series({'values'; '=Sheet1!$8$2:$8$8',
			'categories ': '=Sheet1!$A$2:$A$8',
			'name'; '=Sheet1!$8$1',})

>>> chart.add_series({'values': '=Sheet1!$C$2:$C$8',
			'categories': '=Sheet1!$A$2:$A$8',
			'name': '=Sheet1!$C$1',})


위와 같이 add_series()의 인자 categories와 name에 값의 범위를 지정하면 엑셀 차트의 X축은 categories에 지정한 데이터값이 표시되고 범례에는 name에 지정한 데이터값이 표시된다. 



이제 엑셀 차트의 X축과 범례가 원하는 값으로 잘 지정되었다. 
하지만 엑셀 차트를 보면 x축과 y축 라벨도 없고 제목도 없다. 

다음 코드를 이용해 엑셀 차트에 라벨과 제목을 추가해준다.


# ( 5-1 ) 엑셀 차트에 x, y축 라벨과 제목 추가

>>> chart.set_title({'name': '시간대별 생산량'})

>>> chart.set_x_axis({'name': '시간'})

>>> chart.set_y_axis({'name': '생산량'}) 




지금까지의 추가 사항을 모두 적용해 
새로운 엑셀 파일('data_chart_in_excel2.xlsx')에 DataFrame의 데이터와 엑셀 차트를추가히는 코드를 작성하면 
다음과 같다.


# (1) pandas의 ExcelWriter 객체 생성
>>> excel_chart = pd.ExcelWriter('D:/py/data/data_chart_in_excel2.xlsx', engine= 'xlsxwriter')


# (2) DataFrame 데이터를 지정된 엑셀 시트(Sheet)에 쓰기
>>> df.to_excel(excel_chart, index=True, sheet_name='Sheet1')


# (3) ExcelWriter 객체에서 워크북(workbook)과 워크시트(worksheet) 객체 생성
workbook = excel_chart.book
worksheet = excel_chart.sheets['Sheet1']


# (4) 차트 객체 생성( 원 하는 차트의 종류 지정)
chart = workbook.add_chart({type: line})


# (5) 차트 생성을 위 한 데이터값의 범위 지정
>>> chart.add_series({'values': '=Sheet1!$B$2:$B$8',
		'categories': '=Sheet1!$A$2:$A$8',
		'name'; '=Sheet1!$B$1'} )

>>> chart.add_series({'values'; '=Sheet1!$C$2:$C$8', 	
		'categories': '=Sheet1!$A$2: $A$8',
		'name': '=Sheet1!$C$1'})


# (5-1) 엑셀 차트에 x, y축 라벨과 제목 추가
chart.set title ({'name': '시간대별 샘산량'})
chart.set_x_axis({'name': '시간'})
chart.set_y_axis({'name': '생산량'})


# (6) 워크시트에 차트가 들어 갈 위치를 지정해 차트 넣 기
worksheet.insert_chart('D2', chart)


# (7) ExcelWriter 객체를 닫고 엑셀 파일 출력
excel_chart.save()
